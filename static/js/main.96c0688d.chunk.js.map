{"version":3,"sources":["index.js"],"names":["constrainMove","x","y","width","height","vectorHeight","vectorWidth","Math","round","min","max","constrainResize","movingCorner","movingX","movingY","arrayReplace","arr","index","item","slice","Array","isArray","RectShape","wrapShape","isActual","color","fill","stroke","idIterator","Editor","frameItems","setFrameItems","useState","sampleLabels","frameIndex","setFrameIndex","isActualFrameItems","mostRecentItems","length","i","items","setThisFrameItems","fn","prevFrameItems","nextFrameItems","concat","console","log","JSON","stringify","setVectorDimensions","videoDuration","setVideoDuration","fps","setFps","frameLength","isPaused","setIsPaused","vidRef","useRef","timestampWatcherRef","scale","shapes","map","id","shapeId","shapeIndex","onChange","newRect","currentItems","onDelete","maxFrames","ceil","updateFrameIndex","nextFrameIndex","timeSec","current","currentTime","floor","stopTracking","cancelAnimationFrame","startTracking","requestAnimationFrame","jumpToFrame","fixed","useEffect","keyboardHandler","e","handled","key","preventDefault","window","addEventListener","removeEventListener","style","position","ref","onLoadedMetadata","target","videoWidth","videoHeight","duration","onTimeUpdate","onPlay","onPause","onWaiting","onPlaying","controls","loop","src","top","left","onAddShape","onClick","vid","paused","play","pause","result","prompt","String","trim","Number","isNaN","parseFloat","title","type","step","value","parseInt","href","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.96c0688d.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ShapeEditor, DrawLayer, wrapShape } from 'react-shape-editor';\nimport sampleLabels from './sample-labels.json';\n\nconst DESIRED_VIDEO_WIDTH = 500;\nconst USE_SAMPLE_LABELS = true;\n\nconst constrainMove = ({ x, y, width, height, vectorHeight, vectorWidth }) => {\n  return {\n    x: Math.round(Math.min(vectorWidth - width, Math.max(0, x))),\n    y: Math.round(Math.min(vectorHeight - height, Math.max(0, y))),\n  };\n};\n\nconst constrainResize = ({\n  movingCorner: { x: movingX, y: movingY },\n  vectorHeight,\n  vectorWidth,\n}) => {\n  return {\n    x: Math.round(Math.min(vectorWidth, Math.max(0, movingX))),\n    y: Math.round(Math.min(vectorHeight, Math.max(0, movingY))),\n  };\n};\n\nfunction arrayReplace(arr, index, item) {\n  return [\n    ...arr.slice(0, index),\n    ...(Array.isArray(item) ? item : [item]),\n    ...arr.slice(index + 1),\n  ];\n}\n\nconst RectShape = wrapShape(({ width, height, isActual }) => {\n  const color = isActual ? '0,0,255' : '0,0,0';\n  return (\n    <rect\n      width={width}\n      height={height}\n      fill={`rgba(${color},0.2)`}\n      stroke={`rgba(${color},0.8)`}\n    />\n  );\n});\n\nlet idIterator = 1;\nconst Editor = () => {\n  const [frameItems, setFrameItems] = useState(\n    USE_SAMPLE_LABELS ? sampleLabels : []\n  );\n  const [frameIndex, setFrameIndex] = useState(0);\n\n  let isActualFrameItems = true;\n  let mostRecentItems = frameItems[frameIndex] || [];\n  if (mostRecentItems.length === 0) {\n    for (let i = frameIndex - 1; i >= 0; i -= 1) {\n      const items = frameItems[i];\n      if (items && items.length > 0) {\n        mostRecentItems = items;\n        isActualFrameItems = false;\n        break;\n      }\n    }\n  }\n\n  const setThisFrameItems = fn => {\n    setFrameItems(prevFrameItems => {\n      const nextFrameItems = prevFrameItems.concat();\n      nextFrameItems[frameIndex] = fn(mostRecentItems);\n      console.log(JSON.stringify(nextFrameItems));\n      return nextFrameItems;\n    });\n  };\n\n  const [{ vectorHeight, vectorWidth }, setVectorDimensions] = useState({\n    vectorHeight: 0,\n    vectorWidth: 0,\n  });\n  const [videoDuration, setVideoDuration] = useState(0);\n  const [fps, setFps] = useState(24);\n  const frameLength = 1 / fps;\n  const getFrameIndex = timeSec => {\n    return Math.floor(timeSec / frameLength);\n  };\n  const [isPaused, setIsPaused] = useState(true);\n\n  const vidRef = useRef();\n  const timestampWatcherRef = useRef();\n\n  // Using scale will make sure that the coordinates you end up\n  // with map back properly to the original video coordinates\n  const scale = DESIRED_VIDEO_WIDTH / (vectorWidth || 1);\n\n  const shapes = mostRecentItems.map((item, index) => {\n    const { id, height, width, x, y } = item;\n    return (\n      <RectShape\n        key={id}\n        shapeId={id}\n        shapeIndex={index}\n        height={height}\n        width={width}\n        x={x}\n        y={y}\n        isActual={isActualFrameItems}\n        onChange={newRect => {\n          setThisFrameItems(currentItems =>\n            arrayReplace(currentItems, index, {\n              ...item,\n              ...newRect,\n            })\n          );\n        }}\n        onDelete={() => {\n          setThisFrameItems(currentItems =>\n            arrayReplace(currentItems, index, [])\n          );\n        }}\n        constrainMove={constrainMove}\n        constrainResize={constrainResize}\n      />\n    );\n  });\n  const maxFrames = Math.ceil(videoDuration / frameLength);\n  const updateFrameIndex = () => {\n    const nextFrameIndex = getFrameIndex(vidRef.current.currentTime);\n    if (nextFrameIndex !== frameIndex) {\n      setFrameIndex(nextFrameIndex);\n    }\n  };\n  const stopTracking = () => {\n    cancelAnimationFrame(timestampWatcherRef.current);\n  };\n  const startTracking = () => {\n    timestampWatcherRef.current = requestAnimationFrame(() => {\n      updateFrameIndex();\n      startTracking();\n    });\n  };\n  const jumpToFrame = index => {\n    const fixed = (maxFrames + index) % maxFrames;\n    vidRef.current.currentTime = frameLength * (fixed + 0.001);\n  };\n\n  useEffect(() => {\n    const keyboardHandler = e => {\n      let handled = true;\n      switch (e.key) {\n        case 'a':\n          jumpToFrame(frameIndex - 1);\n          break;\n        case 'd':\n          jumpToFrame(frameIndex + 1);\n          break;\n        default:\n          handled = false;\n      }\n\n      if (handled) {\n        e.preventDefault();\n      }\n    };\n\n    window.addEventListener('keydown', keyboardHandler);\n    return () => window.removeEventListener('keydown', keyboardHandler);\n  });\n\n  return (\n    <div style={{ position: 'relative' }}>\n      {/*\n        Unfortunately, SVGs don't have a nice way of embedding videos,\n        so placing the editor on top with\n        absolute positioning is the best option\n      */}\n      <video\n        ref={vidRef}\n        width={vectorWidth * scale}\n        height={vectorHeight * scale}\n        id=\"video\"\n        onLoadedMetadata={e => {\n          // Set a listener to get the video's true dimensions when it loads\n          setVectorDimensions({\n            vectorWidth: e.target.videoWidth,\n            vectorHeight: e.target.videoHeight,\n          });\n          setVideoDuration(e.target.duration);\n        }}\n        onTimeUpdate={updateFrameIndex}\n        onPlay={() => {\n          setIsPaused(false);\n          startTracking();\n        }}\n        onPause={() => {\n          setIsPaused(true);\n          stopTracking();\n          jumpToFrame(frameIndex);\n        }}\n        onWaiting={stopTracking}\n        onPlaying={startTracking}\n        // Since the editor being on top captures all the mouse clicks\n        // there's not much use to leaving the controls\n        controls={false}\n        loop\n      >\n        <source src=\"http://www.w3schools.com/html/mov_bbb.mp4\" />\n      </video>\n      <ShapeEditor\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n        }}\n        vectorWidth={vectorWidth}\n        vectorHeight={vectorHeight}\n        scale={scale}\n      >\n        <DrawLayer\n          onAddShape={({ x, y, width, height }) => {\n            setThisFrameItems(currentItems => [\n              ...currentItems,\n              { id: `id${idIterator}`, x, y, width, height },\n            ]);\n            idIterator += 1;\n          }}\n          constrainMove={constrainMove}\n          constrainResize={constrainResize}\n        />\n        {shapes}\n      </ShapeEditor>\n      <button\n        onClick={() => {\n          const vid = vidRef.current;\n          if (vid.paused) {\n            vid.play();\n          } else {\n            vid.pause();\n          }\n        }}\n      >\n        {isPaused ? 'Play' : 'Pause'}\n      </button>\n\n      <button\n        onClick={() => {\n          const result = prompt(\n            'Change the FPS? (note: time offset issues will occur with existing boxes)',\n            String(fps)\n          );\n          if (\n            result === null ||\n            result.trim().length < 1 ||\n            Number.isNaN(parseFloat(result))\n          ) {\n            return;\n          }\n\n          setFps(parseFloat(result));\n        }}\n      >\n        {fps} FPS\n      </button>\n\n      <button\n        title=\"Back one frame (a key)\"\n        onClick={() => jumpToFrame(frameIndex - 1)}\n      >\n        &lt;\n      </button>\n      <input\n        type=\"number\"\n        min={-1}\n        max={maxFrames}\n        step={1}\n        value={frameIndex}\n        onChange={e =>\n          jumpToFrame(e.target.value !== '' ? parseInt(e.target.value, 10) : 0)\n        }\n      />\n      <button\n        title=\"Forward one frame (d key)\"\n        onClick={() => jumpToFrame(frameIndex + 1)}\n      >\n        &gt;\n      </button>\n      <br />\n      <br />\n      <br />\n      <a href=\"https://github.com/fritz-c/react-shape-editor\">\n        React Shape Editor\n      </a>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Editor />, rootElement);\n"],"sourceRoot":""}